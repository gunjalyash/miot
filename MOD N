library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity MODN12 is
generic(N:integer :=6);
    Port ( reset : in  STD_LOGIC;
           clk  : in  STD_LOGIC;
           Q : out  integer range 0 to N-1);
end MODN12;

architecture Behavioral of MODN12 is
SIGNAL temp : integer range 0 to N-1;
begin
Process(reset,clk)
begin
if clk'event and clk='1' then
if(reset='1' or temp=N-1 )then
temp<=0;
else
temp<=temp+1;
end if;
end if;
end Process;

end Behavioral;





Testbench:


LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY MODN_TB IS
END MODN_TB;
 
ARCHITECTURE behavior OF MODN_TB IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT MODN12
    PORT(
         reset : IN  std_logic;
         clk : IN  std_logic;
         Q : OUT  integer range 0 to 5
        );
    END COMPONENT;
    

   --Inputs
   signal reset : std_logic := '0';
   signal clk : std_logic := '0';

 	--Outputs
   signal Q :integer range 0 to 5 ;

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: MODN12 PORT MAP (
          reset => reset,
          clk => clk,
          Q => Q
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
	
      -- hold reset state for 100 ns.
      wait for 100 ns;	
		reset<='1';
		wait for 20 ns;
		reset<='0';
		
		

      wait for clk_period*10;

      -- insert stimulus here 

      wait;
   end process;

END;
